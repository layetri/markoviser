#lang racket

(require csd/music_transforms)
(require racket/gui)
(require racket/draw)

(provide chain->bitmap)

; Define font styles
(define h1
    (make-font #:size 28.0 #:family 'system #:weight 'ultrabold #:smoothing 'smoothed))

(define p
    (make-font #:size 14.0 #:family 'system #:weight 'normal #:smoothing 'smoothed))

(define small
    (make-font #:size 10.0 #:family 'system #:weight 'normal #:smoothing 'smoothed))

; Helper function: translate a MIDI note number to a note name (NL/NL)
(define (number-to-note number)
    (define notes '(c cis d dis e f fis g gis a bes b))
    (list-ref notes (remainder number 12)))

; Helper function: count list members that start with...
(define (list-counter lst key)
    (cond [(empty? lst) 0]
          [(eq? (car lst) key) (+ (list-counter (cdr lst) key) 1)]
          [else (list-counter (cdr lst) key)]))

; Helper function: get index of item in list
(define (th-of-list lst key)
    (let loop ((lst lst)
               (idx 0))
        (cond ((empty? lst) #f)
              ((equal? (first lst) key) idx)
              (else (loop (rest lst) (add1 idx))))))

; Draw the chain to a bitmap
(define (chain->bitmap chain [path "/Users/layetri/IdeaProjects/Scheme_lessen/export"])
    (begin
        ; Create the world
        (define chain-bmp (make-bitmap 1000 500))
        (define cdc (new bitmap-dc% [bitmap chain-bmp]))
        (define chain-len 1)

        (send cdc set-brush "white" 'solid)
        (send cdc draw-rectangle 0 0 1000 500)

        ; Add captions (title, copyright)
        (send cdc set-font h1)
        (send cdc draw-text (path->string (car (reverse (explode-path path)))) 30 30)

        (send cdc set-font small)
        (send cdc set-brush "gray" 'solid)
        (send cdc draw-text "Generated by Markoviser. Â© 2019 Daniel Kamp" 750 470)

        ; Define the continent
        (define starts (hash-keys chain))
        (define filtered-notes '())
        (define tmp-hash (make-hash))

        ; For each node in the chain...
        (define (note-map chain)
            (for ([i starts])
                 (begin
                     (define curnote (number-to-note (car i)))
                     ; Filter all notes to a list where each note only occurs once
                     (cond [(not (member curnote filtered-notes)) (set! filtered-notes (append (list curnote) filtered-notes))])

                     (define curpos (hash-ref chain i))
                     ; Convert the note numbers to symbols
                     (define (iterate-over-possibilities pos)
                         (if (empty? pos) '()
                             (append (list (number-to-note (caar pos))) (iterate-over-possibilities (cdr pos)))))

                     ; Add the converted notes to a new hash table
                     (hash-set! tmp-hash curnote (iterate-over-possibilities curpos))
                     (set! chain-len (+ chain-len 1)))))

        ; Perform the mapping function
        (note-map chain)

        (send cdc set-brush "black" 'solid)
        (send cdc set-font p)

        ; Time to draw!
        (define canvas-width 800)
        (define canvas-height 500)
        (define note-amt (length filtered-notes))
        (define circle-width (/ (/ canvas-width note-amt) 2.5))

        (define (relative percent total) (* total (/ percent 100)))

        ; For all nodes in the chain...
        (define (draw-chain nodes)
            ; Keep count of the
            (define internal-len 0)
            (for ([i (sort nodes symbol<?)])
                 (begin
                     (send cdc set-pen (new pen% [color "black"] [width 2]))
                     (send cdc set-brush "white" 'solid)

                     (send cdc draw-rounded-rectangle
                           (+ 100 (* (/ canvas-width note-amt) internal-len)) ;x-offset
                           (/ (- canvas-height circle-width) 2) ;y-offset
                           circle-width circle-width -0.5)

                     (send cdc draw-text (symbol->string i)
                           (+ (+ 100 (* (/ canvas-width note-amt) internal-len)) (relative 40 circle-width)) ;x-offset
                           (+ (relative 30 circle-width) (/ (- canvas-height circle-width) 2)))

                     (send cdc set-pen (new pen% [color "red"] [width 3]))

                     (for ([a (hash-ref tmp-hash i)])
                          (begin
                              ;calc the distance between edge+2 and edge-2
                              ;make a spline with these values with the highest point halfway at y-20
                              (define cur-th (th-of-list (sort filtered-notes symbol<?) a))

                              (if (> (note-to-number i) (note-to-number a))
                                  ; draw the lines above
                                  (send cdc draw-spline
                                        ;start
                                        (+ 100 (/ circle-width 2) (* (/ canvas-width note-amt) internal-len))
                                        (- (/ (- canvas-height circle-width) 2) 5)
                                        ;curve
                                        (+ 100 (+
                                                   (* (/ canvas-width note-amt) internal-len)
                                                   (/ (-
                                                          (* (/ canvas-width note-amt) cur-th)
                                                          (* (/ canvas-width note-amt) internal-len)) 2)))
                                        (- (/ (- canvas-height circle-width) 2) 55)
                                        ;end
                                        (+ 100 (/ circle-width 2) (* (/ canvas-width note-amt) cur-th))
                                        (- (/ (- canvas-height circle-width) 2) 5))

                                  ; draw the lines below
                                  (send cdc draw-spline
                                        ;start
                                        (+ 100 (/ circle-width 2) (* (/ canvas-width note-amt) cur-th)) ;x-offset
                                        (+ (/ (+ canvas-height circle-width) 2) 5) ;y-offset
                                        ;via
                                        (+ 100 (+
                                                   (* (/ canvas-width note-amt) internal-len)
                                                   (/ (-
                                                          (* (/ canvas-width note-amt) cur-th)
                                                          (* (/ canvas-width note-amt) internal-len)) 2))) ;x-offset
                                        (+ (/ (+ canvas-height circle-width) 2) 50) ;y-offset
                                        ;end
                                        (+ 100 (/ circle-width 2) (* (/ canvas-width note-amt) internal-len)) ;x-offset
                                        (+ (/ (+ canvas-height circle-width) 2) 5) ;y-offset
                                        ))))

                     (set! internal-len (+ internal-len 1)))))

        (draw-chain filtered-notes)

        (send cdc draw-bitmap chain-bmp 0 0 'solid)
        (send chain-bmp save-file (string->path (string-append path ".png")) 'png)))

; For unit testing
(define (test) (begin
    (define hash (make-hash))
    (hash-set! hash '(60 1) '((62 1) (64 1) (65 1) (67 1)))
    (hash-set! hash '(62 1) '((60 1) (64 1) (65 1) (67 1)))
    (hash-set! hash '(64 1) '((60 1) (62 1) (65 1) (67 1)))
    (hash-set! hash '(65 1) '((60 1) (64 1) (62 1) (67 1)))
    (hash-set! hash '(67 1) '((60 1) (64 1) (65 1) (62 1)))
    (chain->bitmap hash)))
;(test)